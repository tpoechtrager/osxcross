#!/usr/bin/env bash

pushd "${0%/*}" &>/dev/null
eval `./osxcross-env`
eval `./osxcross-conf`
popd &>/dev/null

type=`basename $0`

if [ $type != "${type/o64/}" ] || [ $type != "${type/x86_64/}" ]; then
    ARCH1="x86_64"
    ARCH2=$ARCH1
else
    if [ $type != "${type/o32/}" ] || [ $type != "${type/i386/}" ]; then
        ARCH1="i386"
        ARCH2="i686"
    else
        echo "unknown arch"
        exit 1
    fi
fi

if [ $type != "${type/++/}" ]; then
    COMPILER="clang++"
else
    COMPILER="clang"
fi

if [ $COMPILER == "clang++" ] && [ "$type" != "${type/libc++/}" ]; then
    USE_LIBCXX=1
else
    USE_LIBCXX=0
fi

if [ $# -gt 0 ]; then
    for p in "$@"
    do
        if [[ "$p" == -mmacosx-version-min=* ]]; then
            OSXCROSS_OSX_VERSION_MIN="default"

            MIN_TARGET_VERSION=`echo "$p" | tr '=' ' ' | tr '.' ' ' | awk '{printf "%d %d", $2, $3}'`
            MIN_TARGET_VERSION_MAJOR=`echo $MIN_TARGET_VERSION | awk '{print $1}'`
            MIN_TARGET_VERSION_MINOR=`echo $MIN_TARGET_VERSION | awk '{print $2}'`

            if [ $MIN_TARGET_VERSION_MAJOR -ge 10 ] && [ $MIN_TARGET_VERSION_MINOR -ge 9 ]; then
                # default to libc++ on >= 10.9
                USE_LIBCXX=1
            fi            
        fi
        if [ "$p" == "-stdlib=libc++" ]; then
            USE_LIBCXX=2
        fi
#       if [[ "$p" == -g* ]] && [ "$p" != "-g0" ] && [ "$p" != "-ggdb0" ]; then
#           echo -e "\e[1mosxcross \e[35mwarning:\e[0m\e[1m replacing '$p' with '-g0'\e[0m" 1>&2
#       fi
    done
fi

if [ $OSXCROSS_OSX_VERSION_MIN != "default" ]; then
    OSX_VERSION_MIN_OPT="-mmacosx-version-min=$OSXCROSS_OSX_VERSION_MIN"
else
    OSX_VERSION_MIN_OPT=""
fi

export COMPILER_PATH="$OSXCROSS_CCTOOLS_PATH:$COMPILER_PATH"

STDINC=$OSXCROSS_SDK/usr/include

if [ $USE_LIBCXX -ne 0 ]; then
    if [ ! -f "$OSXCROSS_SDK/../libcxx_$OSXCROSS_SDK_VERSION/lib/libc++.a" ]; then
        echo -e "\e[1mosxcross \e[31merror:\e[0m\e[1m you must build libc++ before you can use it (./build_libcxx.sh)\e[0m" 1>&2
        exit 1
    fi

    CPLUSINC="-nostdinc++ -cxx-isystem $OSXCROSS_SDK/../libcxx_$OSXCROSS_SDK_VERSION/include/c++/v1"

    if [ $USE_LIBCXX -eq 1 ]; then
        CPLUSINC="$CPLUSINC -stdlib=libc++"
    fi

    CPLUSINC="$CPLUSINC -Qunused-arguments -lc++abi"
    CPLUSINC="$CPLUSINC -L$OSXCROSS_SDK/../libcxx_$OSXCROSS_SDK_VERSION/lib"
else
    CPLUSINC="-isystem $OSXCROSS_SDK/usr/lib/gcc/i686-apple-$OSXCROSS_TARGET/4.2.1/include"
    CPLUSINC="$CPLUSINC -cxx-isystem $OSXCROSS_SDK/usr/include/c++/4.0.0 "
    CPLUSINC="$CPLUSINC -cxx-isystem $OSXCROSS_SDK/usr/include/c++/4.0.0/$ARCH2-apple-darwin9 "
fi

TARGET=$ARCH1-apple-$OSXCROSS_TARGET

XMMINTRIN=`readlink "$STDINC/xmmintrin.h"`
if [ $? -eq 0 ] && [ ! -f "$XMMINTRIN" ]; then
    pushd "${0%/*}" &>/dev/null
    if [ -f "osxcross-fix-intrinsic-headers" ]; then
        echo -e "\e[1mosxcross:\e[0m\e[35m fixing intrinsic symlinks...\e[0m" 1>&2
        ./osxcross-fix-intrinsic-headers $OSXCROSS_SDK || { echo -e "\e[31mfailed.\e[0m" 1>&2 && exit 1; }
        echo -e "\e[1mdone.\e[0m" 1>&2
    else
        echo -e "\e[1mosxcross \e[31merror:\e[0m\e[1m dead intrinsic link found - please re-run ./build.sh\e[0m" 1>&2 
        exit 1
    fi
fi

$COMPILER $OSXCROSS_TARGET_OPTION $TARGET -isysroot $OSXCROSS_SDK \
$CPLUSINC \
$OSX_VERSION_MIN_OPT -mlinker-version=$OSXCROSS_LINKER_VERSION $OSXCROSS_OPT_ARGS \
${1+"$@"} -g0

exit $?
